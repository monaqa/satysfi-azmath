% azmath/accent.satyh
%
% hat や dot などのアクセント記号を定義するパッケージ．

@require: gr
@require: option
@import: util

type wide-accent = context -> ((length * length * length * length) * deco)

module AZMathAccent : sig

  direct \hat    : [float?; math;] math-cmd
  direct \tilde  : [float?; math;] math-cmd
  direct \bar    : [float?; math;] math-cmd
  direct \adot   : [float?; math;] math-cmd
  direct \ddot   : [float?; math;] math-cmd
  direct \breve  : [float?; math;] math-cmd
  direct \vec    : [float?; math;] math-cmd
  % direct \hat-a : [] math-cmd

  % direct \wide-accent : [wide-accent; math] inline-cmd
  direct \widehat : [float?; math;] math-cmd
  direct \overline: [math;] math-cmd
  direct \overrightarrow: [math;] math-cmd
  direct \overleftarrow: [math;] math-cmd
  direct \overleftrightarrow: [math;] math-cmd
  direct \underrightarrow: [math;] math-cmd
  direct \underleftarrow: [math;] math-cmd
  direct \underleftrightarrow: [math;] math-cmd

end = struct

  % let accent-scheme str-acc thickness inner =
  %   let accent = math-char MathOrd str-acc in
  %   ${#inner#accent}

  let max-len l1 l2 = if l1 >' l2 then l1 else l2

  % アクセントの付いた文字を返す．
  % wid-acc-r: font-size に対するアクセントの横方向の幅の割合．
  % acc-thickness-r: font-size に対するアクセントの高さ方向の厚みの割合．
  let accent-scheme str-acc wid-acc-r acc-thickness-r shift-offset-opt inner =
    let embedf ctx =
      let accent = math-char MathOrd str-acc in
      let ib-inner = embed-math ctx inner in
      let ib-accent = embed-math ctx accent in
      let (wid-in, ht-in, dp-in) = get-natural-metrics ib-inner in
      let (_, ht-acc, _) = get-natural-metrics ib-accent in

      let offset-acc = ht-acc -' (ctx |> get-font-size) *' acc-thickness-r in
      let wid-acc = (ctx |> get-font-size) *' wid-acc-r in
      let shift-offset = (ctx |> get-font-size) *' (shift-offset-opt |> Option.from 0.) in
      let ht = max-len ht-in ht-acc in
      let dp = dp-in in

      let xoffset =
        if wid-in >' wid-acc
        then % 右揃え
          wid-in
        else % 中央揃え
          wid-in +' (wid-acc -' wid-in) *' 0.5
      in

      let grlst (x, y) =
        [
          draw-text (x, y) ib-inner;
          draw-text (x +' xoffset +' shift-offset, y +' ht-in -' offset-acc) ib-accent;
        ]
      in

      math-graphics MathOrd wid-in ht dp grlst
    in

    math-in-math MathOrd embedf

  let-math \hat    ?:shift inner = accent-scheme ` ̂` 0.5 0.25 shift inner
  let-math \tilde  ?:shift inner = accent-scheme ` ̃` 0.5 0.28 shift inner
  let-math \bar    ?:shift inner = accent-scheme ` ̅` 0.5 0.20 shift inner
  let-math \adot   ?:shift inner = accent-scheme ` ̇` 0.5 0.22 shift inner
  let-math \ddot   ?:shift inner = accent-scheme ` ̈` 0.5 0.22 shift inner
  let-math \breve  ?:shift inner = accent-scheme ` ̆` 0.5 0.28 shift inner
  let-math \vec    ?:shift inner = accent-scheme ` ⃗` 0.5 0.28 shift inner

  let-math \overline m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.125 in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y +' ht +' margin in
        let path = Gr.line (0pt, 0pt) (wid, 0pt) in
        [stroke 0.5pt text-color (path |> shift-path (x, y +' ht))]
      in
      inline-frame-outer (0pt, 0pt, margin, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \widehat ?:ht-ratio m =
    let ht-ratio = ht-ratio |> Option.from 0.2 in

    let embedf ctx =
      let fsize = get-font-size ctx in
      let ib = embed-math ctx m in
      let hat-height = (get-natural-width ib) *' ht-ratio in
      let margin = fsize *' 0.1 in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y +' ht -' hat-height in
        let path =
          let hat-thickness-mid = 0.6pt in
          let hat-thickness-end = 0.2pt in
          let half-wid = wid *' .5 in
          start-path (0pt, 0pt)
            |> line-to (0pt, hat-thickness-end)
            |> line-to (half-wid, hat-height +' hat-thickness-mid)
            |> line-to (wid, hat-thickness-end)
            |> line-to (wid, 0pt)
            |> line-to (half-wid, hat-height)
            |> close-with-line
        in
        [fill text-color (path |> shift-path (x, ht-base))]
      in
      inline-frame-outer (0pt, 0pt, margin +' hat-height, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let path-arrowline x-start x-end = Gr.line (x-start, 0pt) (x-end, 0pt)
  let path-leftarrowhead x-start wid-arrowhead =
    start-path (x-start +' 2.5pt, wid-arrowhead)
      |> bezier-to (x-start +' 2.0pt, wid-arrowhead *' 0.5) (x-start +' 1.5pt, wid-arrowhead *' 0.167) (x-start, 0pt)
      |> bezier-to (x-start +' 1.5pt, 0pt -' wid-arrowhead *' 0.167) (x-start +' 2.0pt, 0pt -' wid-arrowhead *' 0.5) (x-start +' 2.5pt, 0pt -' wid-arrowhead)
      |> terminate-path
  let path-rightarrowhead x-end wid-arrowhead =
    start-path (x-end -' 2.5pt, wid-arrowhead)
      |> bezier-to (x-end -' 2.0pt, wid-arrowhead *' 0.5) (x-end -' 1.5pt, wid-arrowhead *' 0.167) (x-end, 0pt)
      |> bezier-to (x-end -' 1.5pt, 0pt -' wid-arrowhead *' 0.167) (x-end -' 2.0pt, 0pt -' wid-arrowhead *' 0.5) (x-end -' 2.5pt, 0pt -' wid-arrowhead)
      |> terminate-path

  let-math \overrightarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y +' ht -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-rightarrowhead x-end wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \overleftarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y +' ht -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-leftarrowhead x-start wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \overleftrightarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y +' ht -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-leftarrowhead x-start wid-arrowhead |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-rightarrowhead x-end wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \underrightarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-rightarrowhead x-end wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \underleftarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-leftarrowhead x-start wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf

  let-math \underleftrightarrow m =
    let embedf ctx =
      let fsize = get-font-size ctx in
      let margin = fsize *' 0.25 in
      let wid-arrowhead = 3pt in

      let deco (x, y) wid ht dp =
        let text-color = get-text-color ctx in
        let ht-base = y -' wid-arrowhead in
        let x-start = 0pt in
        let x-end = wid in
        [
          stroke 0.5pt text-color (path-arrowline x-start x-end |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-leftarrowhead x-start wid-arrowhead |> shift-path (x, ht-base));
          stroke 0.5pt text-color (path-rightarrowhead x-end wid-arrowhead |> shift-path (x, ht-base));
        ]
      in
      inline-frame-outer (0pt, 0pt, margin +' wid-arrowhead, 0pt) deco (embed-math ctx m)
    in
    text-in-math MathOrd embedf
end
